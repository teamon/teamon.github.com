<!DOCTYPE html><html><head><meta charset="utf-8" /><meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible" /><title>Merb - flash</title><link href="http://fonts.googleapis.com/css?family=Droid+Sans:400,700|Bitter:400,700,400italic|Open+Sans:300italic,400italic,700italic,400,300,700" media="screen" rel="stylesheet" type="text/css" /><link href="../assets/stylesheets/all-f5ec2720.css" media="screen" rel="stylesheet" type="text/css" /><script src="../assets/javascripts/all-eca7008a.js" type="text/javascript"></script></head><body class="x2008 x2008_merb-flash"><div class="navbar navbar-default"><div class="navbar-collapse collapse navbar-responsive-collapse"><div class="container"><ul class="nav navbar-nav"><li><a class="navbar-brand" href="/">Blog</a></li><li><a class="navbar-brand" href="/about.html">About</a></li><li><a class="navbar-brand" href="/projects.html">Projects</a></li><li><a class="navbar-brand" href="/talks.html">Talks</a></li></ul></div></div></div><div class="container"><article class="post"><div class="page-header"><div class="row"><div class="col-md-10"><h1>Merb - flash</h1></div><div class="col-md-2 post-date"><time datetime="2008-10-31">Oct 31, 2008</time></div></div></div><div class="alert alert-info">This article is written in Polish and was originally
<a href="http://teamon.jogger.pl/2008/10/31/merb-flash">published at Jogger</a>.</div><div class="lead"><p>UPDATE: Zamiast calej zabawy - plugin <a href="http://github.com/teamon/merb-flash/tree/master">merb-flash :)</p>

<p>Kontynuując <a href="http://teamon.eu/2008/10/31/merb-kolorowy-logger/">serię o sztuczkach w <a href="http://merbivore.com">Merbie tym razem przedstawię coś, czego najbardziej mi zabrakło - railsowego flasha.</p>

<p>Twórcy Merba zrezygnowali z takiego rozwiązania, i postawili na dodatkowy parametr <em>_message przekazywany w url jako zakodowany ciąg znaków.</p>
<pre class="highlight ruby"><span class="n">redirect</span> <span class="n">resource</span><span class="p">(</span><span class="vi">@product</span><span class="p">),</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">"Product was successfully created"</span>
</pre>
<p>Jednak według mnie to rozwiązanie jest po prostu brzydkie. Podpatrując nieco z pluginu <a href="http://github.com/ivey/merb\_has\_flash/tree/master">merb_has_flash zamieniłem ów <em>:message na wersję wykorzystującą sesje bez zmieniania API.</p>
<pre class="highlight ruby"><span class="c1"># lib/flash.rb</span>


<span class="k">class</span> <span class="nc">Flash</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
    <span class="vi">@attrs</span> <span class="o">=</span> <span class="no">Mash</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
    <span class="vi">@keepers</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">[]=</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="vi">@attrs</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="n">keep</span> <span class="n">key</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="vi">@attrs</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="nb">hash</span><span class="p">.</span><span class="nf">keys</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="n">keep</span> <span class="n">key</span><span class="p">}</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
    <span class="vi">@attrs</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">keep</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span>
    <span class="vi">@keepers</span> <span class="o">&lt;&lt;</span> <span class="n">key</span> <span class="k">unless</span> <span class="vi">@keepers</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">sweep</span>
    <span class="vi">@attrs</span><span class="p">.</span><span class="nf">keys</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="vi">@attrs</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="k">unless</span> <span class="vi">@keepers</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="n">key</span><span class="p">)}</span>
    <span class="vi">@keepers</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="k">class</span> <span class="nc">Merb</span><span class="o">::</span><span class="no">Request</span>
  <span class="k">def</span> <span class="nf">message</span>
    <span class="n">session</span><span class="o">[</span><span class="s1">'flash'</span><span class="o">]</span> <span class="o">||</span> <span class="p">{}</span>
  <span class="k">end</span>
<span class="k">end</span>


<span class="k">class</span> <span class="nc">Merb</span><span class="o">::</span><span class="no">Controller</span>
  <span class="n">after</span> <span class="ss">:sweep_flash</span>
  <span class="k">def</span> <span class="nf">sweep_flash</span>
    <span class="n">session</span><span class="o">[</span><span class="s2">"flash"</span><span class="o">]</span><span class="p">.</span><span class="nf">sweep</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="s2">"flash"</span><span class="o">]</span>
  <span class="k">end</span>


  <span class="k">def</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="n">default_redirect_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:permanent</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="p">}</span>
    <span class="n">opts</span> <span class="o">=</span> <span class="n">default_redirect_options</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>
      <span class="n">opts</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span><span class="p">}</span> <span class="k">unless</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
      <span class="n">session</span><span class="o">[</span><span class="s1">'flash'</span><span class="o">]</span> <span class="o">=</span> <span class="no">Flash</span><span class="p">.</span><span class="nf">new</span> <span class="k">unless</span> <span class="n">session</span><span class="o">[</span><span class="s1">'flash'</span><span class="o">]</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Flash</span><span class="p">)</span>
      <span class="n">session</span><span class="o">[</span><span class="s1">'flash'</span><span class="o">]</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:permanent</span><span class="o">]</span> <span class="p">?</span> <span class="mi">301</span> <span class="p">:</span> <span class="mi">302</span>
    <span class="no">Merb</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"Redirecting to: </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">status</span><span class="si">}</span><span class="s2">)"</span><span class="p">)</span>
    <span class="n">headers</span><span class="o">[</span><span class="s1">'Location'</span><span class="o">]</span> <span class="o">=</span> <span class="n">url</span>
    <span class="s2">"You are being &lt;a href=</span><span class="se">\"</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="se">\"</span><span class="s2">&gt;redirected."</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
<p>Jak już wspomniałem, sposób użycia się w zasadzie nie zmienia. Jedyną zmianą jest to, że gdy podamy jako parametr <em>:message ciąg znaków to zamieni się on na <em>{:notice =&gt; &ldquo;nasza wiadomosc&rdquo;}. Dzięki temu nie musimy pisać:</p>
<pre class="highlight ruby"><span class="n">redirect</span> <span class="n">resource</span><span class="p">(</span><span class="vi">@product</span><span class="p">),</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">"Product was successfully created"</span><span class="p">}</span>
</pre>
<p>aby odróżnić potem typ wiadomości. Jeśli chcemy wyświetlić error to nic nie stoi na przeszkodzie aby zapisać:
<code>ruby
redirect url(:default), :message =&gt; {:error =&gt; &quot;Product not found&quot;}
</code></p>

<p>Wyświetlanie wiadomości podobnie jak w Rails: (wersja haml)</p>
<pre class="highlight ruby"><span class="o">-</span> <span class="n">message</span><span class="p">.</span><span class="nf">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="p">,</span> <span class="n">msg</span><span class="o">|</span>
  <span class="o">=</span> <span class="n">tag</span> <span class="ss">:div</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">"flash"</span>
</pre>
<p>W celu załadowania tej &ldquo;poprawki&rdquo; dopisujemy do pliku <em>conifg/init.rb
 <pre lang="ruby">require &quot;lib/flash.rb&quot;
 lub
 <pre lang="ruby">Merb.push_path(:lib, Merb.root / &quot;lib&quot;)
 Przy drugim sposobie zostaną automatycznie załadowane wszystkie pliki z katalogu <em>lib</p>

<p>Warto jeszcze wspomnieć, że patch działa razem z merb-auth.</p>

<p>Do zobaczenia w następnym odcinku :P</p>
 </div></article><div class="page-header"><h2>Comments</h2></div><div class="alert alert-info">Please comment at the <a href="http://teamon.jogger.pl/2008/10/31/merb-flash">original post</a>.</div><ul class="pager"><li class="next"><a href="/2008/screenshot-calej-strony-quicksilver-i-growl">Older post →</a></li><li class="previous"><a href="/2008/pobieranie-listy-plikow-z-dropboxa">← Newer post</a></li></ul></div><footer><div class="container"><div class="page-header"></div><div class="row"><div class="col-md-12"><ul class="list-unstyled"><li class="pull-right"><a href="#top">Back to top ↑</a></li><li><a href="/">Blog</a></li><li><a href="/about.html">About</a></li><li><a href="/projects.html">Projects</a></li><li><a href="/talks.html">Talks</a></li><li>|</li><li><a href="http://github.com/teamon">GitHub</a></li><li><a href="http://twitter.com/iteamon">Twitter</a></li><li><a href="http://monterail.com">Monterail</a></li><li><a href="http://codetunes.com">Codetunes</a></li></ul></div></div><div class="row"><div class="col-md-12"><p>Copyright 2007-2014 &mdash; Tymon Tobolski <br />Based on <a href="http://bootswatch.com/lumen/">Lumen Bootswatch</a>. Web fonts from <a href="http://www.google.com/webfonts">Google</a>. </p></div></div></div></footer></body></html>